name: Build static GTFS

on:
  schedule:
    - cron: "10 18 * * *"   # UTC (JST 03:10)
  workflow_dispatch: {}

concurrency:
  group: static-gtfs
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GTFS_STATIC_ZIP_URL: ${{ secrets.GTFS_STATIC_ZIP_URL }}
      ROUTE_ID_FILTER: ""   # 例: "41102,41103" で特定路線だけ
    steps:
      - uses: actions/checkout@v4

      # 任意：unzipが無い環境への保険
      - name: Ensure unzip
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Compose URL
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${ODPT_KEY:-}" ]]; then
            BASE_URL="https://api.odpt.org/api/v4/files/odpt/TransportationBureau_CityOfKawasaki/AllLines.zip"
            if [[ -n "${DATE:-}" ]]; then
              URL="${BASE_URL}?date=${DATE}&acl:consumerKey=${ODPT_KEY}"
            else
              URL="${BASE_URL}?acl:consumerKey=${ODPT_KEY}"
            fi
          elif [[ -n "${GTFS_STATIC_ZIP_URL:-}" ]]; then
            URL="${GTFS_STATIC_ZIP_URL}"
          else
            echo "No URL/KEY provided." >&2; exit 1
          fi
          echo "$URL" > url.txt
          echo "Using URL (masked):"
          sed -E 's/(acl:consumerKey=)[^& ]+/\1***MASKED***/' url.txt

      - name: Download ZIP (follow redirects) & verify
        shell: bash
        run: |
          set -euo pipefail
          URL=$(cat url.txt)
          curl -fSL --retry 3 --retry-all-errors "$URL" -o gtfs.zip
          unzip -t gtfs.zip
          rm -rf gtfs_static
          mkdir -p gtfs_static
          unzip -jo gtfs.zip -d gtfs_static
          echo "Extracted files:"
          ls -l gtfs_static
          for f in stops.txt routes.txt trips.txt stop_times.txt; do
            [[ -s "gtfs_static/$f" ]] || { echo "Missing $f"; exit 1; }
          done

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps for converter
        run: npm i csv-parse@5.x

      - name: Write converter script (inline)
        shell: bash
        run: |
          mkdir -p scripts
          cat > scripts/build-static-gtfs.mjs <<'EOF'
          // ESM converter: split stop_times by route to avoid >100MB
          import fs from "node:fs";
          import path from "node:path";
          import { parse } from "csv-parse/sync";

          const SRC = "gtfs_static";
          const OUT = "docs";

          const ROUTE_ID_FILTER = (process.env.ROUTE_ID_FILTER || "")
            .split(",").map(s=>s.trim()).filter(Boolean);
          const USE_ROUTE_FILTER = ROUTE_ID_FILTER.length > 0;

          function ensureDir(p){ fs.mkdirSync(p,{recursive:true}); }
          function readCsv(name){
            const file = path.join(SRC, name);
            if(!fs.existsSync(file)) throw new Error(`Missing ${file}`);
            const text = fs.readFileSync(file,"utf8");
            return parse(text,{columns:true,skip_empty_lines:true});
          }
          function writeJson(rel, data){
            const out = path.join(OUT, rel);
            ensureDir(path.dirname(out));
            const json = JSON.stringify(data);
            fs.writeFileSync(out, json, "utf8");
            const mb = (Buffer.byteLength(json)/1e6).toFixed(1);
            console.log(`wrote ${rel} (${mb} MB)`);
          }

          console.log("Reading GTFS CSVs...");
          ensureDir(OUT);
          const stops = readCsv("stops.txt");
          const routesAll = readCsv("routes.txt");
          const tripsAll = readCsv("trips.txt");
          const stopTimesAll = readCsv("stop_times.txt");

          let routes = routesAll;
          if (USE_ROUTE_FILTER){
            const keep = new Set(ROUTE_ID_FILTER);
            routes = routesAll.filter(r => keep.has(r.route_id));
            console.log(`Route filter: kept ${routes.length} / ${routesAll.length}`);
          }

          const keepRoute = new Set(routes.map(r=>r.route_id));
          const trips = tripsAll.filter(t => !USE_ROUTE_FILTER || keepRoute.has(t.route_id));

          const tripToRoute = new Map();
          for (const t of trips) tripToRoute.set(t.trip_id, t.route_id);

          const byRoute = new Map();
          let dropped = 0;
          for (const st of stopTimesAll){
            const rid = tripToRoute.get(st.trip_id);
            if (!rid){ dropped++; continue; }
            if (!byRoute.has(rid)) byRoute.set(rid, []);
            byRoute.get(rid).push({
              trip_id: st.trip_id,
              arrival_time: st.arrival_time,
              departure_time: st.departure_time,
              stop_id: st.stop_id,
              stop_sequence: st.stop_sequence,
              stop_headsign: st.stop_headsign,
            });
          }
          if (dropped) console.log(`stop_times rows dropped: ${dropped}`);

          writeJson("routes.json", routes);
          writeJson("trips.json", trips);
          writeJson("stops.json", stops);

          const index = [];
          for (const [route_id, rows] of byRoute.entries()){
            const rel = `stop_times/by_route/${route_id}.json`;
            writeJson(rel, rows);
            index.push({ route_id, file: rel, count: rows.length });
          }
          index.sort((a,b)=>a.route_id.localeCompare(b.route_id));
          writeJson("stop_times/index.json", index);

          console.log("Done.");
          EOF

      - name: Convert TXT -> JSON (slim build)
        env:
          ROUTE_ID_FILTER: ${{ env.ROUTE_ID_FILTER }}
        run: node scripts/build-static-gtfs.mjs

      - name: Commit docs/*
        shell: bash
        run: |
          set -e
      
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
          # 変更がなければ終了
          git add -A docs || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
      
          git commit -m "chore: update static GTFS JSON"
      
          # 競合回避：最新mainへrebaseしてからpush（最大3回リトライ）
          for i in 1 2 3; do
            echo "Attempt $i: rebase & push"
            git fetch origin main
            # rebase失敗時はabortしてリトライ
            if git rebase origin/main; then
              if git push origin HEAD:main; then
                echo "Pushed successfully."
                exit 0
              fi
            else
              git rebase --abort || true
            fi
            echo "Retrying..."
            sleep 2
          done
      
          echo "Failed to push after retries."
          exit 1
      
      - name: Upload build artifacts (manifest)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: static-gtfs-build
          path: |
            gtfs.zip
            gtfs_static/stops.txt
            gtfs_static/routes.txt
            gtfs_static/trips.txt
            gtfs_static/stop_times.txt
            # ▼ 再帰指定でJSON全部
            docs/**/*.json
