name: Fetch GTFS-RT and commit JSON

on:
  # schedule:
  #   - cron: "*/5 * * * *"   # 5分ごと（UTC）←必要に応じて有効化
  workflow_dispatch: {}

concurrency:
  group: gtfsrt
  cancel-in-progress: true

jobs:
  fetch-and-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      # 必須：ODPTのGTFS-RTエンドポイント（TripUpdate推奨）をSecretsに設定
      GTFSRT_URL: ${{ secrets.GTFSRT_URL }}
      # 出力先（GitHub Pages公開用）
      OUT_FILE: docs/realtime_tripupdates.json
      # ETag を保存する場所（リポジトリにコミットして永続化）
      ETAG_FILE: docs/.rt_etag

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Prepare workdir
        run: |
          mkdir -p .cache
          mkdir -p docs

      # ──────────────────────────────────────────────────────────────
      # 条件付きGET：ETag ベース（304なら以降をスキップ）
      # ──────────────────────────────────────────────────────────────
      - name: Conditional GET (ETag)
        id: fetch_rt
        run: |
          PREV_ETAG="$(test -f "${ETAG_FILE}" && cat "${ETAG_FILE}" || true)"
          echo "Prev ETag: ${PREV_ETAG}"

          HTTP_CODE=$(curl -sSL --compressed \
            -H "If-None-Match: ${PREV_ETAG}" \
            -D .cache/rt.headers -o .cache/rt.raw \
            -w "%{http_code}" "${GTFSRT_URL}")

          echo "http_code=${HTTP_CODE}" >> $GITHUB_OUTPUT
          echo "HTTP ${HTTP_CODE}"

          NEW_ETAG=$(grep -i '^etag:' .cache/rt.headers | sed -E 's/^[Ee][Tt][Aa][Gg]: *//' | tr -d '\r')
          echo "New ETag: ${NEW_ETAG}"
          echo "new_etag=${NEW_ETAG}" >> $GITHUB_OUTPUT

      # ──────────────────────────────────────────────────────────────
      # 200 OK のときだけ: protobuf → JSON 変換
      # （gtfs-realtime-bindings をその場でインストール）
      # ──────────────────────────────────────────────────────────────
      - name: Install decoder
        if: steps.fetch_rt.outputs.http_code == '200'
        run: |
          npm init -y >/dev/null 2>&1 || true
          npm i --no-audit --no-fund gtfs-realtime-bindings@^1

      - name: Convert PB to JSON
        if: steps.fetch_rt.outputs.http_code == '200'
        run: |
          node -e "import fs from 'node:fs'; \
            import * as G from 'gtfs-realtime-bindings'; \
            const buf = fs.readFileSync('.cache/rt.raw'); \
            const feed = G.transit_realtime.FeedMessage.decode(buf); \
            const json = { entity: feed.entity.map(e => ({ \
              id: String(e.id||''), \
              trip_update: e.tripUpdate ? (function(tu){ \
                const toNum=(v)=>v==null?undefined:Number(v); \
                const stu=(tu.stopTimeUpdate||[]).map(u=>({ \
                  stop_id: u.stopId, \
                  stop_sequence: toNum(u.stopSequence), \
                  arrival: u.arrival?{time:toNum(u.arrival.time),delay:toNum(u.arrival.delay)}:undefined, \
                  departure: u.departure?{time:toNum(u.departure.time),delay:toNum(u.departure.delay)}:undefined, \
                  schedule_relationship: u.scheduleRelationship \
                })); \
                return { \
                  trip:{ \
                    trip_id: tu.trip?.tripId, \
                    route_id: tu.trip?.routeId, \
                    direction_id: tu.trip?.directionId, \
                    start_date: tu.trip?.startDate \
                  }, \
                  stop_time_update: stu, \
                  schedule_relationship: tu.scheduleRelationship, \
                  timestamp: toNum(tu.timestamp) \
                }; \
              })(e.tripUpdate):undefined \
            }))}; \
            fs.writeFileSync('.cache/realtime.json', JSON.stringify(json));"

      # ──────────────────────────────────────────────────────────────
      # 中身が変わらなければコミットしない
      # （変わった場合のみ JSON と ETag をコミット）
      # ──────────────────────────────────────────────────────────────
      - name: Commit if changed
        if: steps.fetch_rt.outputs.http_code == '200'
        run: |
          set -e
          if [ -f "${OUT_FILE}" ] && cmp -s ".cache/realtime.json" "${OUT_FILE}"; then
            echo "No content change. Skip commit."
            exit 0
          fi

          mv .cache/realtime.json "${OUT_FILE}"
          # ETag を更新（存在しない場合は空でもOK）
          printf "%s" "${{ steps.fetch_rt.outputs.new_etag }}" > "${ETAG_FILE}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 競合に強い push（最大5回リトライ）
          for i in 1 2 3 4 5; do
            git add "${OUT_FILE}" "${ETAG_FILE}"
            if git commit -m "chore: update GTFS-RT JSON ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))"; then
              if git pull --rebase --autostash; then
                if git push; then
                  echo "Pushed."
                  exit 0
                fi
              else
                git rebase --abort || true
              fi
            else
              echo "Nothing to commit."
              exit 0
            fi
            sleep 2
          done
          echo "Push failed."
          exit 1

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gtfsrt-json
          path: ${{ env.OUT_FILE }}
