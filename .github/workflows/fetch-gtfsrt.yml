# fetch-gtfsrt.yml（差分込みの置き換え例）

name: Fetch GTFS-RT and commit JSON

on:
  # schedule:
  #   - cron: "*/5 * * * *"
  workflow_dispatch: {}

concurrency:
  group: gtfsrt
  cancel-in-progress: true

jobs:
  fetch-and-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GTFSRT_URL: ${{ secrets.GTFSRT_URL }}
      OUT_FILE: docs/realtime_tripupdates.json

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # ▼ 作業ツリーを汚さないインストール方法に変更
      - name: Install deps
        run: |
          npm i --no-save --no-audit --no-fund --no-package-lock \
            gtfs-realtime-bindings@^1 node-fetch@^3

      - name: Compose URL
        id: compose
        shell: bash
        run: |
          set -euo pipefail
          URL="${{ secrets.GTFSRT_URL }}"
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "Using: ${URL%%acl:*}acl:consumerKey=***MASKED***"

      - name: Fetch GTFS-RT and generate JSON
        shell: bash
        run: |
          cat > fetch.mjs <<'EOF'
          import fetch from "node-fetch";
          import GtfsRealtimeBindings from "gtfs-realtime-bindings";
          import fs from "node:fs";
          import path from "node:path";

          const url = process.env.URL;
          const out = process.env.OUT_FILE || "docs/realtime_tripupdates.json";

          const res = await fetch(url);
          if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
          const buf = Buffer.from(await res.arrayBuffer());
          const feed = GtfsRealtimeBindings.transit_realtime.FeedMessage.decode(buf);

          const plain = {
            fetched_at: new Date().toISOString(),
            entity: feed.entity.map(e => ({
              id: e.id,
              trip_update: e.tripUpdate ? {
                trip: {
                  trip_id: e.tripUpdate.trip?.tripId || null,
                  route_id: e.tripUpdate.trip?.routeId || null,
                },
                stop_time_update: (e.tripUpdate.stopTimeUpdate || []).map(s => ({
                  stop_sequence: s.stopSequence ?? null,
                  stop_id: s.stopId || null,
                  arrival:  s.arrival?.time?.toString?.() || null,
                  departure: s.departure?.time?.toString?.() || null,
                }))
              } : null,
              vehicle: e.vehicle ? {
                trip: {
                  trip_id: e.vehicle.trip?.tripId || null,
                  route_id: e.vehicle.trip?.routeId || null,
                },
                position: e.vehicle.position ? {
                  latitude:  e.vehicle.position.latitude,
                  longitude: e.vehicle.position.longitude,
                  bearing:   e.vehicle.position.bearing ?? null,
                  speed:     e.vehicle.position.speed ?? null,
                } : null
              } : null,
              alert: e.alert ? { informed_entity_count: (e.alert.informedEntity||[]).length } : null
            }))
          };

          const dir = path.dirname(out);
          if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
          fs.writeFileSync(out, JSON.stringify(plain));
          console.log(`wrote ${out} (${(fs.statSync(out).size/1e6).toFixed(2)} MB)`);
          EOF
          node fetch.mjs
        env:
          URL: ${{ steps.compose.outputs.url }}
          OUT_FILE: ${{ env.OUT_FILE }}

      - name: Commit JSON (rebase & retry)
        shell: bash
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add -A docs || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore: update GTFS-RT JSON"

          # ▼ rebase 前に作業ツリーを完全クリーン化（未追跡・生成物も除去）
          git reset --hard
          git clean -fdx

          for i in 1 2 3; do
            git fetch origin main
            if git rebase origin/main; then
              if git push origin HEAD:main; then
                echo "Pushed."; exit 0
              fi
            else
              git rebase --abort || true
            fi
            sleep 2
          done
          echo "Push failed."; exit 1

      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gtfsrt-json
          path: ${{ env.OUT_FILE }}
          
